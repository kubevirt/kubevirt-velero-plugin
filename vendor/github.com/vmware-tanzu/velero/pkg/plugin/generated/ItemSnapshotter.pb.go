// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ItemSnapshotter.proto

package generated

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ItemSnapshotterAppliesToRequest struct {
	Plugin string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
}

func (m *ItemSnapshotterAppliesToRequest) Reset()         { *m = ItemSnapshotterAppliesToRequest{} }
func (m *ItemSnapshotterAppliesToRequest) String() string { return proto.CompactTextString(m) }
func (*ItemSnapshotterAppliesToRequest) ProtoMessage()    {}
func (*ItemSnapshotterAppliesToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{0}
}

func (m *ItemSnapshotterAppliesToRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

type ItemSnapshotterAppliesToResponse struct {
	ResourceSelector *ResourceSelector `protobuf:"bytes,1,opt,name=ResourceSelector" json:"ResourceSelector,omitempty"`
}

func (m *ItemSnapshotterAppliesToResponse) Reset()         { *m = ItemSnapshotterAppliesToResponse{} }
func (m *ItemSnapshotterAppliesToResponse) String() string { return proto.CompactTextString(m) }
func (*ItemSnapshotterAppliesToResponse) ProtoMessage()    {}
func (*ItemSnapshotterAppliesToResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{1}
}

func (m *ItemSnapshotterAppliesToResponse) GetResourceSelector() *ResourceSelector {
	if m != nil {
		return m.ResourceSelector
	}
	return nil
}

type AlsoHandlesRequest struct {
	Plugin string `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Item   []byte `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Backup []byte `protobuf:"bytes,3,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (m *AlsoHandlesRequest) Reset()                    { *m = AlsoHandlesRequest{} }
func (m *AlsoHandlesRequest) String() string            { return proto.CompactTextString(m) }
func (*AlsoHandlesRequest) ProtoMessage()               {}
func (*AlsoHandlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *AlsoHandlesRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *AlsoHandlesRequest) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *AlsoHandlesRequest) GetBackup() []byte {
	if m != nil {
		return m.Backup
	}
	return nil
}

type AlsoHandlesResponse struct {
	HandledItems []*ResourceIdentifier `protobuf:"bytes,1,rep,name=handledItems" json:"handledItems,omitempty"`
}

func (m *AlsoHandlesResponse) Reset()                    { *m = AlsoHandlesResponse{} }
func (m *AlsoHandlesResponse) String() string            { return proto.CompactTextString(m) }
func (*AlsoHandlesResponse) ProtoMessage()               {}
func (*AlsoHandlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *AlsoHandlesResponse) GetHandledItems() []*ResourceIdentifier {
	if m != nil {
		return m.HandledItems
	}
	return nil
}

type SnapshotItemRequest struct {
	Plugin string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Item   []byte            `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	Params map[string]string `protobuf:"bytes,3,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Backup []byte            `protobuf:"bytes,4,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (m *SnapshotItemRequest) Reset()                    { *m = SnapshotItemRequest{} }
func (m *SnapshotItemRequest) String() string            { return proto.CompactTextString(m) }
func (*SnapshotItemRequest) ProtoMessage()               {}
func (*SnapshotItemRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *SnapshotItemRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *SnapshotItemRequest) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *SnapshotItemRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *SnapshotItemRequest) GetBackup() []byte {
	if m != nil {
		return m.Backup
	}
	return nil
}

type SnapshotItemResponse struct {
	Item             []byte                `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	SnapshotID       string                `protobuf:"bytes,2,opt,name=snapshotID" json:"snapshotID,omitempty"`
	SnapshotMetadata map[string]string     `protobuf:"bytes,3,rep,name=snapshotMetadata" json:"snapshotMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AdditionalItems  []*ResourceIdentifier `protobuf:"bytes,4,rep,name=additionalItems" json:"additionalItems,omitempty"`
	HandledItems     []*ResourceIdentifier `protobuf:"bytes,5,rep,name=handledItems" json:"handledItems,omitempty"`
}

func (m *SnapshotItemResponse) Reset()                    { *m = SnapshotItemResponse{} }
func (m *SnapshotItemResponse) String() string            { return proto.CompactTextString(m) }
func (*SnapshotItemResponse) ProtoMessage()               {}
func (*SnapshotItemResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *SnapshotItemResponse) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *SnapshotItemResponse) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

func (m *SnapshotItemResponse) GetSnapshotMetadata() map[string]string {
	if m != nil {
		return m.SnapshotMetadata
	}
	return nil
}

func (m *SnapshotItemResponse) GetAdditionalItems() []*ResourceIdentifier {
	if m != nil {
		return m.AdditionalItems
	}
	return nil
}

func (m *SnapshotItemResponse) GetHandledItems() []*ResourceIdentifier {
	if m != nil {
		return m.HandledItems
	}
	return nil
}

type ProgressRequest struct {
	Plugin     string              `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	ItemID     *ResourceIdentifier `protobuf:"bytes,2,opt,name=itemID" json:"itemID,omitempty"`
	SnapshotID string              `protobuf:"bytes,3,opt,name=snapshotID" json:"snapshotID,omitempty"`
	Backup     []byte              `protobuf:"bytes,4,opt,name=backup,proto3" json:"backup,omitempty"`
}

func (m *ProgressRequest) Reset()                    { *m = ProgressRequest{} }
func (m *ProgressRequest) String() string            { return proto.CompactTextString(m) }
func (*ProgressRequest) ProtoMessage()               {}
func (*ProgressRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *ProgressRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *ProgressRequest) GetItemID() *ResourceIdentifier {
	if m != nil {
		return m.ItemID
	}
	return nil
}

func (m *ProgressRequest) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

func (m *ProgressRequest) GetBackup() []byte {
	if m != nil {
		return m.Backup
	}
	return nil
}

type ProgressResponse struct {
	Phase           string `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	ItemsCompleted  int64  `protobuf:"varint,2,opt,name=itemsCompleted" json:"itemsCompleted,omitempty"`
	ItemsToComplete int64  `protobuf:"varint,3,opt,name=itemsToComplete" json:"itemsToComplete,omitempty"`
	Started         int64  `protobuf:"varint,4,opt,name=started" json:"started,omitempty"`
	StartedNano     int64  `protobuf:"varint,5,opt,name=startedNano" json:"startedNano,omitempty"`
	Updated         int64  `protobuf:"varint,6,opt,name=updated" json:"updated,omitempty"`
	UpdatedNano     int64  `protobuf:"varint,7,opt,name=updatedNano" json:"updatedNano,omitempty"`
	Err             string `protobuf:"bytes,8,opt,name=err" json:"err,omitempty"`
}

func (m *ProgressResponse) Reset()                    { *m = ProgressResponse{} }
func (m *ProgressResponse) String() string            { return proto.CompactTextString(m) }
func (*ProgressResponse) ProtoMessage()               {}
func (*ProgressResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *ProgressResponse) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

func (m *ProgressResponse) GetItemsCompleted() int64 {
	if m != nil {
		return m.ItemsCompleted
	}
	return 0
}

func (m *ProgressResponse) GetItemsToComplete() int64 {
	if m != nil {
		return m.ItemsToComplete
	}
	return 0
}

func (m *ProgressResponse) GetStarted() int64 {
	if m != nil {
		return m.Started
	}
	return 0
}

func (m *ProgressResponse) GetStartedNano() int64 {
	if m != nil {
		return m.StartedNano
	}
	return 0
}

func (m *ProgressResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *ProgressResponse) GetUpdatedNano() int64 {
	if m != nil {
		return m.UpdatedNano
	}
	return 0
}

func (m *ProgressResponse) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

type DeleteItemSnapshotRequest struct {
	Plugin         string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	SnapshotID     string            `protobuf:"bytes,2,opt,name=snapshotID" json:"snapshotID,omitempty"`
	ItemFromBackup []byte            `protobuf:"bytes,3,opt,name=itemFromBackup,proto3" json:"itemFromBackup,omitempty"`
	Metadata       map[string]string `protobuf:"bytes,4,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Params         map[string]string `protobuf:"bytes,5,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DeleteItemSnapshotRequest) Reset()                    { *m = DeleteItemSnapshotRequest{} }
func (m *DeleteItemSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteItemSnapshotRequest) ProtoMessage()               {}
func (*DeleteItemSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *DeleteItemSnapshotRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *DeleteItemSnapshotRequest) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

func (m *DeleteItemSnapshotRequest) GetItemFromBackup() []byte {
	if m != nil {
		return m.ItemFromBackup
	}
	return nil
}

func (m *DeleteItemSnapshotRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DeleteItemSnapshotRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type CreateItemFromSnapshotRequest struct {
	Plugin           string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Item             []byte            `protobuf:"bytes,2,opt,name=item,proto3" json:"item,omitempty"`
	SnapshotID       string            `protobuf:"bytes,3,opt,name=snapshotID" json:"snapshotID,omitempty"`
	ItemFromBackup   []byte            `protobuf:"bytes,4,opt,name=itemFromBackup,proto3" json:"itemFromBackup,omitempty"`
	SnapshotMetadata map[string]string `protobuf:"bytes,5,rep,name=snapshotMetadata" json:"snapshotMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Params           map[string]string `protobuf:"bytes,6,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Restore          []byte            `protobuf:"bytes,7,opt,name=restore,proto3" json:"restore,omitempty"`
}

func (m *CreateItemFromSnapshotRequest) Reset()                    { *m = CreateItemFromSnapshotRequest{} }
func (m *CreateItemFromSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateItemFromSnapshotRequest) ProtoMessage()               {}
func (*CreateItemFromSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *CreateItemFromSnapshotRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *CreateItemFromSnapshotRequest) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CreateItemFromSnapshotRequest) GetSnapshotID() string {
	if m != nil {
		return m.SnapshotID
	}
	return ""
}

func (m *CreateItemFromSnapshotRequest) GetItemFromBackup() []byte {
	if m != nil {
		return m.ItemFromBackup
	}
	return nil
}

func (m *CreateItemFromSnapshotRequest) GetSnapshotMetadata() map[string]string {
	if m != nil {
		return m.SnapshotMetadata
	}
	return nil
}

func (m *CreateItemFromSnapshotRequest) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *CreateItemFromSnapshotRequest) GetRestore() []byte {
	if m != nil {
		return m.Restore
	}
	return nil
}

type CreateItemFromSnapshotResponse struct {
	Item            []byte                `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	AdditionalItems []*ResourceIdentifier `protobuf:"bytes,2,rep,name=additionalItems" json:"additionalItems,omitempty"`
	SkipRestore     bool                  `protobuf:"varint,3,opt,name=skipRestore" json:"skipRestore,omitempty"`
}

func (m *CreateItemFromSnapshotResponse) Reset()         { *m = CreateItemFromSnapshotResponse{} }
func (m *CreateItemFromSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*CreateItemFromSnapshotResponse) ProtoMessage()    {}
func (*CreateItemFromSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor2, []int{10}
}

func (m *CreateItemFromSnapshotResponse) GetItem() []byte {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *CreateItemFromSnapshotResponse) GetAdditionalItems() []*ResourceIdentifier {
	if m != nil {
		return m.AdditionalItems
	}
	return nil
}

func (m *CreateItemFromSnapshotResponse) GetSkipRestore() bool {
	if m != nil {
		return m.SkipRestore
	}
	return false
}

type ItemSnapshotterInitRequest struct {
	Plugin string            `protobuf:"bytes,1,opt,name=plugin" json:"plugin,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ItemSnapshotterInitRequest) Reset()                    { *m = ItemSnapshotterInitRequest{} }
func (m *ItemSnapshotterInitRequest) String() string            { return proto.CompactTextString(m) }
func (*ItemSnapshotterInitRequest) ProtoMessage()               {}
func (*ItemSnapshotterInitRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *ItemSnapshotterInitRequest) GetPlugin() string {
	if m != nil {
		return m.Plugin
	}
	return ""
}

func (m *ItemSnapshotterInitRequest) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

func init() {
	proto.RegisterType((*ItemSnapshotterAppliesToRequest)(nil), "generated.ItemSnapshotterAppliesToRequest")
	proto.RegisterType((*ItemSnapshotterAppliesToResponse)(nil), "generated.ItemSnapshotterAppliesToResponse")
	proto.RegisterType((*AlsoHandlesRequest)(nil), "generated.AlsoHandlesRequest")
	proto.RegisterType((*AlsoHandlesResponse)(nil), "generated.AlsoHandlesResponse")
	proto.RegisterType((*SnapshotItemRequest)(nil), "generated.SnapshotItemRequest")
	proto.RegisterType((*SnapshotItemResponse)(nil), "generated.SnapshotItemResponse")
	proto.RegisterType((*ProgressRequest)(nil), "generated.ProgressRequest")
	proto.RegisterType((*ProgressResponse)(nil), "generated.ProgressResponse")
	proto.RegisterType((*DeleteItemSnapshotRequest)(nil), "generated.DeleteItemSnapshotRequest")
	proto.RegisterType((*CreateItemFromSnapshotRequest)(nil), "generated.CreateItemFromSnapshotRequest")
	proto.RegisterType((*CreateItemFromSnapshotResponse)(nil), "generated.CreateItemFromSnapshotResponse")
	proto.RegisterType((*ItemSnapshotterInitRequest)(nil), "generated.ItemSnapshotterInitRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ItemSnapshotter service

type ItemSnapshotterClient interface {
	Init(ctx context.Context, in *ItemSnapshotterInitRequest, opts ...grpc.CallOption) (*Empty, error)
	AppliesTo(ctx context.Context, in *ItemSnapshotterAppliesToRequest, opts ...grpc.CallOption) (*ItemSnapshotterAppliesToResponse, error)
	AlsoHandles(ctx context.Context, in *AlsoHandlesRequest, opts ...grpc.CallOption) (*AlsoHandlesResponse, error)
	SnapshotItem(ctx context.Context, in *SnapshotItemRequest, opts ...grpc.CallOption) (*SnapshotItemResponse, error)
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
	DeleteSnapshot(ctx context.Context, in *DeleteItemSnapshotRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateItemFromSnapshot(ctx context.Context, in *CreateItemFromSnapshotRequest, opts ...grpc.CallOption) (*CreateItemFromSnapshotResponse, error)
}

type itemSnapshotterClient struct {
	cc *grpc.ClientConn
}

func NewItemSnapshotterClient(cc *grpc.ClientConn) ItemSnapshotterClient {
	return &itemSnapshotterClient{cc}
}

func (c *itemSnapshotterClient) Init(ctx context.Context, in *ItemSnapshotterInitRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) AppliesTo(ctx context.Context, in *ItemSnapshotterAppliesToRequest, opts ...grpc.CallOption) (*ItemSnapshotterAppliesToResponse, error) {
	out := new(ItemSnapshotterAppliesToResponse)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/AppliesTo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) AlsoHandles(ctx context.Context, in *AlsoHandlesRequest, opts ...grpc.CallOption) (*AlsoHandlesResponse, error) {
	out := new(AlsoHandlesResponse)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/AlsoHandles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) SnapshotItem(ctx context.Context, in *SnapshotItemRequest, opts ...grpc.CallOption) (*SnapshotItemResponse, error) {
	out := new(SnapshotItemResponse)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/SnapshotItem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	out := new(ProgressResponse)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/Progress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) DeleteSnapshot(ctx context.Context, in *DeleteItemSnapshotRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/DeleteSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemSnapshotterClient) CreateItemFromSnapshot(ctx context.Context, in *CreateItemFromSnapshotRequest, opts ...grpc.CallOption) (*CreateItemFromSnapshotResponse, error) {
	out := new(CreateItemFromSnapshotResponse)
	err := grpc.Invoke(ctx, "/generated.ItemSnapshotter/CreateItemFromSnapshot", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ItemSnapshotter service

type ItemSnapshotterServer interface {
	Init(context.Context, *ItemSnapshotterInitRequest) (*Empty, error)
	AppliesTo(context.Context, *ItemSnapshotterAppliesToRequest) (*ItemSnapshotterAppliesToResponse, error)
	AlsoHandles(context.Context, *AlsoHandlesRequest) (*AlsoHandlesResponse, error)
	SnapshotItem(context.Context, *SnapshotItemRequest) (*SnapshotItemResponse, error)
	Progress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	DeleteSnapshot(context.Context, *DeleteItemSnapshotRequest) (*Empty, error)
	CreateItemFromSnapshot(context.Context, *CreateItemFromSnapshotRequest) (*CreateItemFromSnapshotResponse, error)
}

func RegisterItemSnapshotterServer(s *grpc.Server, srv ItemSnapshotterServer) {
	s.RegisterService(&_ItemSnapshotter_serviceDesc, srv)
}

func _ItemSnapshotter_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemSnapshotterInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).Init(ctx, req.(*ItemSnapshotterInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_AppliesTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemSnapshotterAppliesToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).AppliesTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/AppliesTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).AppliesTo(ctx, req.(*ItemSnapshotterAppliesToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_AlsoHandles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlsoHandlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).AlsoHandles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/AlsoHandles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).AlsoHandles(ctx, req.(*AlsoHandlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_SnapshotItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnapshotItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).SnapshotItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/SnapshotItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).SnapshotItem(ctx, req.(*SnapshotItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_Progress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).Progress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/Progress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).Progress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_DeleteSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).DeleteSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/DeleteSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).DeleteSnapshot(ctx, req.(*DeleteItemSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemSnapshotter_CreateItemFromSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemFromSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemSnapshotterServer).CreateItemFromSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ItemSnapshotter/CreateItemFromSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemSnapshotterServer).CreateItemFromSnapshot(ctx, req.(*CreateItemFromSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemSnapshotter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generated.ItemSnapshotter",
	HandlerType: (*ItemSnapshotterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ItemSnapshotter_Init_Handler,
		},
		{
			MethodName: "AppliesTo",
			Handler:    _ItemSnapshotter_AppliesTo_Handler,
		},
		{
			MethodName: "AlsoHandles",
			Handler:    _ItemSnapshotter_AlsoHandles_Handler,
		},
		{
			MethodName: "SnapshotItem",
			Handler:    _ItemSnapshotter_SnapshotItem_Handler,
		},
		{
			MethodName: "Progress",
			Handler:    _ItemSnapshotter_Progress_Handler,
		},
		{
			MethodName: "DeleteSnapshot",
			Handler:    _ItemSnapshotter_DeleteSnapshot_Handler,
		},
		{
			MethodName: "CreateItemFromSnapshot",
			Handler:    _ItemSnapshotter_CreateItemFromSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ItemSnapshotter.proto",
}

func init() { proto.RegisterFile("ItemSnapshotter.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 887 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0x97, 0xe3, 0x5c, 0xee, 0x6e, 0x12, 0x7a, 0xd1, 0xf6, 0x5a, 0x19, 0x57, 0xbd, 0x46, 0x16,
	0xa0, 0x50, 0xa4, 0x08, 0x0e, 0x2a, 0x51, 0x90, 0x40, 0xd7, 0xb4, 0xf4, 0x4e, 0x2a, 0xa5, 0xf2,
	0xf5, 0xa1, 0xaf, 0xdb, 0x78, 0x9b, 0x98, 0xd8, 0x5e, 0xb3, 0xbb, 0x41, 0xba, 0x77, 0x5e, 0x79,
	0xe7, 0x8d, 0xef, 0xc1, 0xf7, 0x40, 0xe2, 0x1b, 0xf0, 0x2d, 0x10, 0xda, 0x3f, 0x0e, 0x1b, 0xc7,
	0x3e, 0xfb, 0xee, 0x78, 0xf3, 0xce, 0xce, 0xcc, 0xfe, 0x66, 0x7e, 0xb3, 0xb3, 0x63, 0xb8, 0x73,
	0x26, 0x48, 0x7a, 0x9e, 0xe1, 0x9c, 0x2f, 0xa8, 0x10, 0x84, 0x4d, 0x72, 0x46, 0x05, 0x45, 0xfb,
	0x73, 0x92, 0x11, 0x86, 0x05, 0x89, 0xfc, 0xc1, 0xf9, 0x02, 0x33, 0x12, 0xe9, 0x8d, 0xe0, 0x31,
	0x3c, 0x28, 0x59, 0x9c, 0xe4, 0x79, 0x12, 0x13, 0xfe, 0x9a, 0x86, 0xe4, 0xa7, 0x15, 0xe1, 0x02,
	0xdd, 0x85, 0x5e, 0x9e, 0xac, 0xe6, 0x71, 0xe6, 0x39, 0x23, 0x67, 0xbc, 0x1f, 0x9a, 0x55, 0xb0,
	0x84, 0x51, 0xbd, 0x29, 0xcf, 0x69, 0xc6, 0x09, 0x7a, 0x0e, 0xc3, 0x90, 0x70, 0xba, 0x62, 0x33,
	0x72, 0x4e, 0x12, 0x32, 0x13, 0x94, 0x29, 0x2f, 0xfd, 0xe3, 0x7b, 0x93, 0x35, 0xa4, 0x49, 0x59,
	0x25, 0xdc, 0x32, 0x0a, 0xde, 0x00, 0x3a, 0x49, 0x38, 0x3d, 0xc5, 0x59, 0x94, 0x10, 0xde, 0x00,
	0x0d, 0x21, 0xe8, 0xc6, 0x82, 0xa4, 0x5e, 0x67, 0xe4, 0x8c, 0x07, 0xa1, 0xfa, 0x96, 0xba, 0x6f,
	0xf1, 0x6c, 0xb9, 0xca, 0x3d, 0x57, 0x49, 0xcd, 0x2a, 0x78, 0x03, 0xb7, 0x37, 0x3c, 0x1b, 0xe4,
	0x27, 0x30, 0x58, 0x28, 0x51, 0x24, 0x83, 0xe4, 0x9e, 0x33, 0x72, 0xc7, 0xfd, 0xe3, 0xfb, 0x15,
	0xa8, 0xcf, 0x22, 0x92, 0x89, 0xf8, 0x5d, 0x4c, 0x58, 0xb8, 0x61, 0x12, 0xfc, 0xe5, 0xc0, 0xed,
	0x22, 0x3b, 0x52, 0x72, 0x1d, 0xd4, 0x4f, 0xa0, 0x97, 0x63, 0x86, 0x53, 0xee, 0xb9, 0x0a, 0xc0,
	0x43, 0x0b, 0x40, 0x85, 0xef, 0xc9, 0x2b, 0xa5, 0xfc, 0x2c, 0x13, 0xec, 0x22, 0x34, 0x96, 0x56,
	0xe4, 0x5d, 0x3b, 0x72, 0xff, 0x31, 0xf4, 0x2d, 0x75, 0x34, 0x04, 0x77, 0x49, 0x2e, 0x0c, 0x26,
	0xf9, 0x89, 0x0e, 0x61, 0xe7, 0x67, 0x9c, 0xac, 0x88, 0x42, 0xb4, 0x1f, 0xea, 0xc5, 0x57, 0x9d,
	0x2f, 0x9d, 0xe0, 0x9f, 0x0e, 0x1c, 0x6e, 0x1e, 0x6f, 0xd2, 0x56, 0xc4, 0xe0, 0x58, 0x31, 0x1c,
	0x01, 0xf0, 0x42, 0xf7, 0xa9, 0xf1, 0x65, 0x49, 0x10, 0x86, 0x61, 0xb1, 0xfa, 0x9e, 0x08, 0x1c,
	0x61, 0x81, 0x4d, 0xb4, 0x8f, 0x6a, 0xa3, 0xd5, 0xc7, 0xad, 0x85, 0x85, 0x9d, 0x0e, 0x7c, 0xcb,
	0x1d, 0x7a, 0x0e, 0x07, 0x38, 0x8a, 0x62, 0x11, 0xd3, 0x0c, 0x27, 0x9a, 0xd0, 0x6e, 0x1b, 0x42,
	0xcb, 0x56, 0x5b, 0x65, 0xb1, 0x73, 0xe5, 0xb2, 0xf0, 0xa7, 0x70, 0xa7, 0x12, 0xf6, 0x95, 0x08,
	0xf8, 0xcd, 0x81, 0x83, 0x57, 0x8c, 0xce, 0x19, 0xe1, 0x8d, 0xb7, 0xe1, 0x11, 0xf4, 0x24, 0x0f,
	0x26, 0xf7, 0x8d, 0x68, 0x8d, 0x72, 0x89, 0x36, 0x77, 0x8b, 0xb6, 0x9a, 0xb2, 0x0a, 0x7e, 0xe9,
	0xc0, 0xf0, 0x3f, 0x68, 0xa6, 0x2e, 0x0e, 0x61, 0x27, 0x5f, 0x60, 0x4e, 0x0c, 0x34, 0xbd, 0x40,
	0x1f, 0xc1, 0x2d, 0x79, 0x18, 0x9f, 0xd2, 0x34, 0x4f, 0x88, 0x20, 0x91, 0x42, 0xe8, 0x86, 0x25,
	0x29, 0x1a, 0xc3, 0x81, 0x92, 0xbc, 0xa6, 0x85, 0x4c, 0xe1, 0x71, 0xc3, 0xb2, 0x18, 0x79, 0xb0,
	0xcb, 0x05, 0x66, 0xd2, 0x55, 0x57, 0x69, 0x14, 0x4b, 0x34, 0x82, 0xbe, 0xf9, 0x7c, 0x89, 0x33,
	0xea, 0xed, 0xa8, 0x5d, 0x5b, 0x24, 0x6d, 0x57, 0x79, 0x24, 0xd3, 0xe2, 0xf5, 0xb4, 0xad, 0x59,
	0x4a, 0x5b, 0xf3, 0xa9, 0x6c, 0x77, 0xb5, 0xad, 0x25, 0x92, 0xdc, 0x11, 0xc6, 0xbc, 0x3d, 0xcd,
	0x1d, 0x61, 0x2c, 0xf8, 0xd5, 0x85, 0xf7, 0x9f, 0x12, 0x09, 0xca, 0xee, 0x92, 0x4d, 0x5c, 0x35,
	0xdd, 0x15, 0x93, 0xb1, 0xef, 0x18, 0x4d, 0x9f, 0xd8, 0xdd, 0xac, 0x24, 0x45, 0x2f, 0x61, 0x2f,
	0x2d, 0xee, 0x92, 0xae, 0xf4, 0x63, 0x8b, 0xf5, 0x5a, 0x5c, 0x93, 0xcd, 0x8b, 0xb4, 0xf6, 0x81,
	0x4e, 0xd7, 0x7d, 0x48, 0x57, 0xfc, 0xa7, 0xad, 0xbc, 0x55, 0x74, 0x23, 0xff, 0x6b, 0x78, 0xef,
	0xda, 0x65, 0x7f, 0x93, 0x96, 0xf5, 0xb7, 0x0b, 0xf7, 0xa7, 0x8c, 0x60, 0x8d, 0x54, 0xa6, 0xaa,
	0x2d, 0x27, 0x55, 0x7d, 0xb9, 0xe9, 0x72, 0x6c, 0xf3, 0xd4, 0xad, 0xe4, 0xe9, 0xc7, 0x8a, 0xde,
	0xa7, 0x33, 0xfc, 0x8d, 0x95, 0xe1, 0x4b, 0x71, 0xb7, 0x6e, 0x82, 0x2f, 0xd6, 0x1c, 0xf6, 0xd4,
	0x09, 0x5f, 0xb4, 0x3e, 0xa1, 0xea, 0x55, 0xf1, 0x60, 0x97, 0x11, 0x2e, 0x28, 0x23, 0xea, 0x3e,
	0x0c, 0xc2, 0x62, 0xf9, 0xbf, 0x34, 0xb8, 0x9b, 0x30, 0xfd, 0xbb, 0x03, 0x47, 0x75, 0xf1, 0x5c,
	0xf2, 0x4c, 0x55, 0xbc, 0x11, 0x9d, 0x6b, 0xbd, 0x11, 0xb2, 0xd3, 0x2c, 0xe3, 0x3c, 0x34, 0xd9,
	0x91, 0xc5, 0xb1, 0x17, 0xda, 0xa2, 0xe0, 0x0f, 0x07, 0xfc, 0xd2, 0xec, 0x74, 0x96, 0xc5, 0x8d,
	0x85, 0x78, 0x06, 0xbd, 0x19, 0xcd, 0xde, 0xc5, 0x73, 0x03, 0xec, 0x33, 0x0b, 0x58, 0xbd, 0xbb,
	0xc9, 0x54, 0xd9, 0x18, 0xf6, 0xb4, 0x03, 0x99, 0x5e, 0x4b, 0x7c, 0x95, 0xf4, 0x1e, 0xff, 0xd9,
	0x85, 0x83, 0xd2, 0x69, 0xe8, 0x5b, 0xe8, 0xca, 0x13, 0xd1, 0x87, 0xad, 0x10, 0xf9, 0x43, 0x4b,
	0xed, 0x59, 0x9a, 0x8b, 0x0b, 0x14, 0xc1, 0xfe, 0x7a, 0x7a, 0x44, 0x0f, 0xeb, 0xbd, 0x94, 0xa7,
	0x53, 0xff, 0x93, 0x56, 0xba, 0x86, 0xf6, 0x17, 0xd0, 0xb7, 0x66, 0x3d, 0x64, 0x13, 0xbb, 0x3d,
	0x5d, 0xfa, 0x47, 0x75, 0xdb, 0xc6, 0xdb, 0x0f, 0x30, 0xb0, 0x87, 0x12, 0x74, 0x74, 0xf9, 0x6c,
	0xe6, 0x3f, 0x68, 0x98, 0x66, 0xd0, 0x14, 0xf6, 0x8a, 0x87, 0x13, 0xf9, 0x96, 0x72, 0xe9, 0xa1,
	0xf7, 0xef, 0x55, 0xee, 0x19, 0x27, 0xa7, 0x70, 0x4b, 0x37, 0xe4, 0xe2, 0x08, 0xf4, 0x41, 0x9b,
	0x5e, 0x5d, 0xc1, 0x49, 0x0a, 0x77, 0xab, 0xaf, 0x11, 0x1a, 0xb7, 0xed, 0x1c, 0xfe, 0xc7, 0x2d,
	0x34, 0x35, 0xf0, 0xb7, 0x3d, 0xf5, 0x47, 0xf2, 0xf9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51,
	0xd9, 0x74, 0xbb, 0xc3, 0x0c, 0x00, 0x00,
}
